-GEN_typhoon_id,
-GEO_n_households,
-GEN_mun_code,
-index,
#-GEN_mun_code,
#-contains("INT_"),
-contains('DAM_'),
-GEN_mun_name)
TRACK_DATA<-read.csv(ECMWF_)%>%dplyr::mutate(STORMNAME='NA',
YYYYMMDDHH=format(strptime(YYYYMMDDHH, format = "%Y-%m-%d %H:%M:%S"), '%Y%m%d%H%00'))
track <- track_interpolation(TRACK_DATA)
test_x       <- data.matrix(model_input)
xgb_test     <- xgb.DMatrix(data=test_x)
y_predicted  <- predict(xgmodel, xgb_test)
df_imact_forecast <- as.data.frame(y_predicted)%>%
dplyr::mutate(index= 1:length(y_predicted),
impact=y_predicted)%>%left_join(data , by = "index")%>%dplyr::mutate(dist50=ifelse(WEA_dist_track >= 50,0,1),
e_impact=ifelse(impact > 100,100,impact),
Damaged_houses=as.integer(GEO_n_households*e_impact*0.01),
)%>%filter(WEA_dist_track<500)%>%dplyr::select(index,
GEN_mun_code,
GEN_mun_name,
GEO_n_households,
GEN_typhoon_name,
GEN_typhoon_id,
WEA_dist_track,
WEA_vmax_sust_mhp,
#GEN_mun_code,
e_impact,
dist50,
Damaged_houses
#GEN_typhoon_name,
#GEN_typhoon_id,
)%>%drop_na()
number_ensambles<-length(unique(df_imact_forecast$GEN_typhoon_id))
df_imact_dist50  <- aggregate(df_imact_forecast$dist50, by=list(GEN_mun_code=df_imact_forecast$GEN_mun_code), FUN=sum)%>%
dplyr::mutate(probability_dist50=100*x/number_ensambles)%>%dplyr::select(GEN_mun_code,probability_dist50)%>%
left_join(aggregate(df_imact_forecast$e_impact, by=list(GEN_mun_code=df_imact_forecast$GEN_mun_code), FUN=sum)%>%
dplyr::mutate(impact=x/number_ensambles)%>%dplyr::select(GEN_mun_code,impact),by='GEN_mun_code')%>%
left_join(aggregate(df_imact_forecast$WEA_dist_track, by=list(GEN_mun_code=df_imact_forecast$GEN_mun_code), FUN=sum)%>%
dplyr::mutate(WEA_dist_track=x/number_ensambles)%>%dplyr::select(GEN_mun_code,WEA_dist_track),by='GEN_mun_code')
df_impact<-df_imact_forecast%>%left_join(df_imact_dist50,by='GEN_mun_code')
df_imact_forecast%>%group_by(GEN_typhoon_id)%>%
dplyr::summarise(CDamaged_houses = sum(Damaged_houses))%>%
dplyr::mutate(DM_CLASS = ifelse(CDamaged_houses >= 100000,4,
ifelse(CDamaged_houses >= 80000,3,
ifelse(CDamaged_houses >= 50000,2,
ifelse(CDamaged_houses >= 30000,1, 0)))))%>%
ungroup()%>%dplyr::summarise(VH_100K = round(100*sum(DM_CLASS>=4)/52),
H_80K = round(100*sum(DM_CLASS>=3)/52),
M_50K = round(100*sum(DM_CLASS >=2)/52),
L_30K = round(100*sum(DM_CLASS>=1)/52))%>%
as_hux()%>%
set_text_color(1, everywhere, "blue")%>%
theme_article()%>%set_caption("PROBABILITY FOR THE NUMBER OF COMPLETELY DAMAGED BUILDINGS")
event_impact <- php_admin3%>%left_join(df_imact_dist50%>%dplyr::mutate(adm3_pcode=GEN_mun_code),by='adm3_pcode')
Typhoon_stormname <- as.character(unique(wind_grid$name)[1])
write.csv(event_impact, file = paste0(Output_folder,'Impact_','_',forecast_time,'_',  Typhoon_stormname,'.csv'))
file_names<- c(paste0(Output_folder,'Impact_','_',forecast_time,'_',  Typhoon_stormname,'.png'),
paste0(Output_folder,'Impact_','_',forecast_time,'_',  Typhoon_stormname,'.csv'))
write.table(file_names, file =paste0(main_directory, 'forecast/',Typhoon_stormname,'_',forecast_time,'_file_names.csv'),append=TRUE, col.names = FALSE)
df_imact_forecast%>%group_by(GEN_typhoon_id)%>%
dplyr::summarise(CDamaged_houses = sum(Damaged_houses))%>%
dplyr::mutate(DM_CLASS = ifelse(CDamaged_houses >= 100000,4,
ifelse(CDamaged_houses >= 80000,3,
ifelse(CDamaged_houses >= 50000,2,
ifelse(CDamaged_houses >= 30000,1, 0)))))%>%
ungroup()%>%dplyr::summarise(VH_100K = round(100*sum(DM_CLASS>=4)/52),
H_80K = round(100*sum(DM_CLASS>=3)/52),
M_50K = round(100*sum(DM_CLASS >=2)/52),
L_30K = round(100*sum(DM_CLASS>=1)/52))#%>%as_hux()%>%set_text_color(1, everywhere, "blue")%>%theme_article()%>%set_caption("PROBABILITY FOR THE NUMBER OF COMPLETELY DAMAGED BUILDINGS")
main_directory
forecast_time
Output_folder
file_names<- c(paste0(Output_folder,'Impact_','_',forecast_time,'_',  Typhoon_stormname,'.png'),
paste0(Output_folder,'Impact_','_',forecast_time,'_',  Typhoon_stormname,'.csv'))
write.table(file_names, file =paste0(Output_folder,'model_output_file_names.csv'),append=TRUE, col.names = FALSE)
rm(list=ls())
#!/usr/bin/env Rscript
args = commandArgs(trailingOnly=TRUE)
#options(warn=-1)
suppressMessages(library(stringr))
suppressMessages(library(ggplot2))
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(tmap))
suppressMessages(library(httr))
suppressMessages(library(sf))
suppressMessages(library(raster))
suppressMessages(library(ranger))
suppressMessages(library(rlang))
suppressMessages(library(plyr))
suppressMessages(library(lubridate))
suppressMessages(library(rNOMADS))
suppressMessages(library(ncdf4))
suppressMessages(library(huxtable))
rainfall_error = args[1]
path='C:/Users/ATeklesadik/OneDrive - Rode Kruis/Documents/documents/Typhoon-Impact-based-forecasting-model/'
#path='home/fbf/'
main_directory<-path
###########################################################################
# ------------------------ import DATA  -----------------------------------
setwd(path)
source('lib_r/settings.R')
source('lib_r/data_cleaning_forecast.R')
source('lib_r/prepare_typhoon_input.R')
source('lib_r/track_interpolation.R')
source('lib_r/Read_rainfall_v2.R')
source('lib_r/Model_input_processing.R')
source('lib_r/run_prediction_model.R')
source('lib_r/Make_maps_ens.R')
source('lib_r/Check_landfall_time.R')
php_admin3 <- st_read(dsn=paste0(main_directory,'data-raw'),layer='phl_admin3_simpl2')
php_admin1 <- st_read(dsn=paste0(main_directory,'data-raw'),layer='phl_admin1_gadm_pcode')
wshade <- php_admin3
material_variable2 <- read.csv(paste0(main_directory,"data/material_variable2.csv"))
data_matrix_new_variables <- read.csv(paste0(main_directory,"data/data_matrix_new_variables.csv"))
geo_variable <- read.csv(paste0(main_directory,"data/geo_variable.csv"))
wshade <- php_admin3
xgmodel<-readRDS(paste0(main_directory,"/models/operational/xgboost_regression_v2.RDS"), refhook = NULL)
# load forecast data
typhoon_info_for_model <- read.csv(paste0(main_directory,"/forecast/Input/typhoon_info_for_model.csv"))
rain_directory<-as.character(typhoon_info_for_model[typhoon_info_for_model$source=='Rainfall',]$filename)
windfield_data<-as.character(typhoon_info_for_model[typhoon_info_for_model$source=='windfield',]$filename)
ECMWF_<-as.character(typhoon_info_for_model[typhoon_info_for_model$source=='ecmwf',]$filename)
Output_folder<-as.character(typhoon_info_for_model[typhoon_info_for_model$source=='Output_folder',]$filename)
forecast_time<-as.character(typhoon_info_for_model[typhoon_info_for_model$source=='ecmwf',]$time)
ntile_na <- function(x,n){
notna <- !is.na(x)
out <- rep(NA_real_,length(x))
out[notna] <- ntile(x[notna],n)
return(out)
}
wind_grid <- read.csv(windfield_data)%>%dplyr::mutate(dis_track_min=ifelse(dis_track_min<1,1,dis_track_min),Mun_Code=adm3_pcode,pcode=as.factor(substr(adm3_pcode, 1, 10)))
rainfall_ <- Read_rainfall_v2(wshade)
typhoon_hazard <- wind_grid%>%
left_join(rainfall_,by = "Mun_Code")%>%
dplyr::mutate(typhoon_name=name,
rainfall_24h=rainfall_24h,
ranfall_sum=rainfall_24h,
dist_track=dis_track_min,
gust_dur=0,
sust_dur=0,
vmax_gust=v_max*1.49,  #sus to gust convrsion 1.49 -- 10 min average
vmax_gust_mph=v_max*1.49*2,23694, #mph 1.9 is factor to drive gust and sustained wind
vmax_sust_mph=v_max*2,23694,
vmax_sust=v_max)%>%     #1.21 is conversion factor for 10 min average to 1min average
dplyr::select(Mun_Code,vmax_gust,vmax_gust_mph,vmax_sust_mph,vmax_sust,dist_track,rainfall_24h,gust_dur,sust_dur,ranfall_sum,storm_id,typhoon_name)
# BUILD DATA MATRIC FOR NEW TYPHOON
data_new_typhoon1 <- geo_variable %>%
left_join(material_variable2 %>% dplyr::select(-Region,-Province,-Municipality_City), by = "Mun_Code") %>%
left_join(data_matrix_new_variables , by = "Mun_Code") %>%
left_join(typhoon_hazard , by = "Mun_Code")%>%na.omit()
data <- clean_typhoon_forecast_data_ensamble(data_new_typhoon1)#%>%na.omit() # Randomforests don't handle NAs, you can impute in the future
model_input<-data%>%dplyr::select(-GEN_typhoon_name,
-GEN_typhoon_id,
-GEO_n_households,
-GEN_mun_code,
-index,
#-GEN_mun_code,
#-contains("INT_"),
-contains('DAM_'),
-GEN_mun_name)
TRACK_DATA<-read.csv(ECMWF_)%>%dplyr::mutate(STORMNAME='NA',
YYYYMMDDHH=format(strptime(YYYYMMDDHH, format = "%Y-%m-%d %H:%M:%S"), '%Y%m%d%H%00'))
file_names
file_names<- c(paste0(Output_folder,'Impact_','_',forecast_time,'_',  Typhoon_stormname,'.png'),
paste0(Output_folder,'Impact_','_',forecast_time,'_',  Typhoon_stormname,'.csv'))
Typhoon_stormname <- as.character(unique(wind_grid$name)[1])
write.csv(event_impact, file = paste0(Output_folder,'Impact_','_',forecast_time,'_',  Typhoon_stormname,'.csv'))
event_impact <- php_admin3%>%left_join(df_imact_dist50%>%dplyr::mutate(adm3_pcode=GEN_mun_code),by='adm3_pcode')
file_names<- c(paste0(Output_folder,'Impact_','_',forecast_time,'_',  Typhoon_stormname,'.png'),
paste0(Output_folder,'Impact_','_',forecast_time,'_',  Typhoon_stormname,'.csv'))
file_names
write.table(file_names, file =paste0(Output_folder,'model_output_file_names.csv'),sep=';',append=TRUE, col.names = FALSE)
Output_folder
write.table(file_names, file =paste0(Output_folder,'model_output_file_names.csv'),sep=';',append=FALSE, col.names = FALSE)
#!/usr/bin/env Rscript
args = commandArgs(trailingOnly=TRUE)
#options(warn=-1)
suppressMessages(library(stringr))
suppressMessages(library(ggplot2))
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(tmap))
suppressMessages(library(httr))
suppressMessages(library(sf))
suppressMessages(library(raster))
suppressMessages(library(ranger))
suppressMessages(library(rlang))
suppressMessages(library(plyr))
suppressMessages(library(lubridate))
suppressMessages(library(rNOMADS))
suppressMessages(library(ncdf4))
suppressMessages(library(huxtable))
suppressMessages(library(xgboost))
rainfall_error = args[1]
path='C:/Users/ATeklesadik/OneDrive - Rode Kruis/Documents/documents/Typhoon-Impact-based-forecasting-model/'
#path='home/fbf/'
main_directory<-path
###########################################################################
# ------------------------ import DATA  -----------------------------------
setwd(path)
source('lib_r/settings.R')
source('lib_r/data_cleaning_forecast.R')
source('lib_r/prepare_typhoon_input.R')
source('lib_r/track_interpolation.R')
source('lib_r/Read_rainfall_v2.R')
source('lib_r/Model_input_processing.R')
source('lib_r/run_prediction_model.R')
source('lib_r/Make_maps_ens.R')
source('lib_r/Check_landfall_time.R')
php_admin3 <- st_read(dsn=paste0(main_directory,'data-raw'),layer='phl_admin3_simpl2')
php_admin1 <- st_read(dsn=paste0(main_directory,'data-raw'),layer='phl_admin1_gadm_pcode')
wshade <- php_admin3
material_variable2 <- read.csv(paste0(main_directory,"data/material_variable2.csv"))
data_matrix_new_variables <- read.csv(paste0(main_directory,"data/data_matrix_new_variables.csv"))
geo_variable <- read.csv(paste0(main_directory,"data/geo_variable.csv"))
wshade <- php_admin3
xgmodel<-readRDS(paste0(main_directory,"/models/operational/xgboost_regression_v2.RDS"), refhook = NULL)
# load forecast data
typhoon_info_for_model <- read.csv(paste0(main_directory,"/forecast/Input/typhoon_info_for_model.csv"))
rain_directory<-as.character(typhoon_info_for_model[typhoon_info_for_model$source=='Rainfall',]$filename)
windfield_data<-as.character(typhoon_info_for_model[typhoon_info_for_model$source=='windfield',]$filename)
ECMWF_<-as.character(typhoon_info_for_model[typhoon_info_for_model$source=='ecmwf',]$filename)
Output_folder<-as.character(typhoon_info_for_model[typhoon_info_for_model$source=='Output_folder',]$filename)
forecast_time<-as.character(typhoon_info_for_model[typhoon_info_for_model$source=='ecmwf',]$time)
ntile_na <- function(x,n){
notna <- !is.na(x)
out <- rep(NA_real_,length(x))
out[notna] <- ntile(x[notna],n)
return(out)
}
wind_grid <- read.csv(windfield_data)%>%dplyr::mutate(dis_track_min=ifelse(dis_track_min<1,1,dis_track_min),Mun_Code=adm3_pcode,pcode=as.factor(substr(adm3_pcode, 1, 10)))
rainfall_ <- Read_rainfall_v2(wshade)
typhoon_hazard <- wind_grid%>%
left_join(rainfall_,by = "Mun_Code")%>%
dplyr::mutate(typhoon_name=name,
rainfall_24h=rainfall_24h,
ranfall_sum=rainfall_24h,
dist_track=dis_track_min,
gust_dur=0,
sust_dur=0,
vmax_gust=v_max*1.49,  #sus to gust convrsion 1.49 -- 10 min average
vmax_gust_mph=v_max*1.49*2,23694, #mph 1.9 is factor to drive gust and sustained wind
vmax_sust_mph=v_max*2,23694,
vmax_sust=v_max)%>%     #1.21 is conversion factor for 10 min average to 1min average
dplyr::select(Mun_Code,vmax_gust,vmax_gust_mph,vmax_sust_mph,vmax_sust,dist_track,rainfall_24h,gust_dur,sust_dur,ranfall_sum,storm_id,typhoon_name)
# BUILD DATA MATRIC FOR NEW TYPHOON
data_new_typhoon1 <- geo_variable %>%
left_join(material_variable2 %>% dplyr::select(-Region,-Province,-Municipality_City), by = "Mun_Code") %>%
left_join(data_matrix_new_variables , by = "Mun_Code") %>%
left_join(typhoon_hazard , by = "Mun_Code")%>%na.omit()
data <- clean_typhoon_forecast_data_ensamble(data_new_typhoon1)#%>%na.omit() # Randomforests don't handle NAs, you can impute in the future
model_input<-data%>%dplyr::select(-GEN_typhoon_name,
-GEN_typhoon_id,
-GEO_n_households,
-GEN_mun_code,
-index,
#-GEN_mun_code,
#-contains("INT_"),
-contains('DAM_'),
-GEN_mun_name)
TRACK_DATA<-read.csv(ECMWF_)%>%dplyr::mutate(STORMNAME='NA',
YYYYMMDDHH=format(strptime(YYYYMMDDHH, format = "%Y-%m-%d %H:%M:%S"), '%Y%m%d%H%00'))
track <- track_interpolation(TRACK_DATA)
test_x       <- data.matrix(model_input)
xgb_test     <- xgb.DMatrix(data=test_x)
y_predicted  <- predict(xgmodel, xgb_test)
df_imact_forecast <- as.data.frame(y_predicted)%>%
dplyr::mutate(index= 1:length(y_predicted),
impact=y_predicted)%>%left_join(data , by = "index")%>%dplyr::mutate(dist50=ifelse(WEA_dist_track >= 50,0,1),
e_impact=ifelse(impact > 100,100,impact),
Damaged_houses=as.integer(GEO_n_households*e_impact*0.01),
)%>%filter(WEA_dist_track<500)%>%dplyr::select(index,
GEN_mun_code,
GEN_mun_name,
GEO_n_households,
GEN_typhoon_name,
GEN_typhoon_id,
WEA_dist_track,
WEA_vmax_sust_mhp,
#GEN_mun_code,
e_impact,
dist50,
Damaged_houses
#GEN_typhoon_name,
#GEN_typhoon_id,
)%>%drop_na()
number_ensambles<-length(unique(df_imact_forecast$GEN_typhoon_id))
df_imact_dist50  <- aggregate(df_imact_forecast$dist50, by=list(GEN_mun_code=df_imact_forecast$GEN_mun_code), FUN=sum)%>%
dplyr::mutate(probability_dist50=100*x/number_ensambles)%>%dplyr::select(GEN_mun_code,probability_dist50)%>%
left_join(aggregate(df_imact_forecast$e_impact, by=list(GEN_mun_code=df_imact_forecast$GEN_mun_code), FUN=sum)%>%
dplyr::mutate(impact=x/number_ensambles)%>%dplyr::select(GEN_mun_code,impact),by='GEN_mun_code')%>%
left_join(aggregate(df_imact_forecast$WEA_dist_track, by=list(GEN_mun_code=df_imact_forecast$GEN_mun_code), FUN=sum)%>%
dplyr::mutate(WEA_dist_track=x/number_ensambles)%>%dplyr::select(GEN_mun_code,WEA_dist_track),by='GEN_mun_code')
df_impact<-df_imact_forecast%>%left_join(df_imact_dist50,by='GEN_mun_code')
df_imact_forecast%>%group_by(GEN_typhoon_id)%>%
dplyr::summarise(CDamaged_houses = sum(Damaged_houses))%>%
dplyr::mutate(DM_CLASS = ifelse(CDamaged_houses >= 100000,4,
ifelse(CDamaged_houses >= 80000,3,
ifelse(CDamaged_houses >= 50000,2,
ifelse(CDamaged_houses >= 30000,1, 0)))))%>%
ungroup()%>%dplyr::summarise(VH_100K = round(100*sum(DM_CLASS>=4)/52),
H_80K = round(100*sum(DM_CLASS>=3)/52),
M_50K = round(100*sum(DM_CLASS >=2)/52),
L_30K = round(100*sum(DM_CLASS>=1)/52))#%>%as_hux()%>%set_text_color(1, everywhere, "blue")%>%theme_article()%>%set_caption("PROBABILITY FOR THE NUMBER OF COMPLETELY DAMAGED BUILDINGS")
event_impact <- php_admin3%>%left_join(df_imact_dist50%>%dplyr::mutate(adm3_pcode=GEN_mun_code),by='adm3_pcode')
Typhoon_stormname <- as.character(unique(wind_grid$name)[1])
maps <- Make_maps_ens(php_admin1,event_impact,track,TYF='ECMWF',Typhoon_stormname)
maps
Typhoon_stormname
Typhoon_stormname <- as.character(unique(wind_grid$name)[1])
TRACK_DATA<-read.csv(ECMWF_)%>%dplyr::mutate(STORMNAME=Typhoon_stormname,
YYYYMMDDHH=format(strptime(YYYYMMDDHH, format = "%Y-%m-%d %H:%M:%S"), '%Y%m%d%H%00'))
track <- track_interpolation(TRACK_DATA)
maps <- Make_maps_ens(php_admin1,event_impact,track,TYF='ECMWF',Typhoon_stormname)
maps
php_admin3=event_impact
my_track=track
TYF='ECMWF'
################################### Make maps #########
Landfall_check <- st_intersection(php_admin1, my_track)
Landfall_point<-Landfall_check[1,]
Landfall_check_1 <- st_intersection(php_admin1,my_track[1,])
if (nrow(Landfall_check_1) == 0){
dt<-lubridate::with_tz(lubridate::ymd_hms(format(Landfall_check$date[1], format="%Y-%m-%d %H:%M:%S"),tz="UTC"), tz="Asia/Manila")
dt1<-lubridate::with_tz(lubridate::ymd_hm(format(as.character(TRACK_DATA$YYYYMMDDHH[1]), format="%Y%m%d%H%M"),tz="UTC"), tz="Asia/Manila")
dt2<-lubridate::with_tz(lubridate::ymd_hm(format(Sys.time(), format="%Y%m%d%H%M"),tz="Europe/Berlin"), tz="Asia/Manila")
dt2=lubridate::with_tz(lubridate::force_tz(Sys.time()), tz="Asia/Manila")
time_for_landfall<- as.numeric(difftime(dt,dt1,units="hours"))
etimated_landfall_time<-dt
}else{
dt<-NA #lubridate::with_tz(lubridate::ymd_hms(format(Landfall_check$date[1], format="%Y-%m-%d %H:%M:%S"),tz="UTC"), tz="Asia/Manila")
dt1<-lubridate::with_tz(lubridate::ymd_hm(format(as.character(TRACK_DATA$YYYYMMDDHH[1]), format="%Y%m%d%H%M"),tz="UTC"), tz="Asia/Manila")
dt2<-lubridate::with_tz(lubridate::ymd_hm(format(Sys.time(), format="%Y%m%d%H%M"),tz="Europe/Berlin"), tz="Asia/Manila")
time_for_landfall<- NA #as.numeric(difftime(dt,dt1,units="hours"))
etimated_landfall_time<-NA
}
#######################################################################
# caculate time for landfll
php_admin4 <- php_admin3 %>% filter(WEA_dist_track < 300)
region2<-extent(php_admin4)
typhoon_region = st_bbox(c(xmin =as.vector(region2@xmin), xmax = as.vector(region2@xmax),
ymin = as.vector(region2@ymin), ymax =as.vector(region2@ymax)),
crs = st_crs(php_admin1)) %>% st_as_sfc()
model_run_time<-lubridate::with_tz(lubridate::force_tz(Sys.time()), tz="Asia/Manila")
subtitle =paste0("Predicted damage per Municipality for ", Typhoon_stormname,'\n',
"Impact map generated at:",model_run_time,'\n',
"Source of wind speed forecast ",TYF,'\n',
"Only Areas within 150km of forecasted track are included",'\n',
"Prediction is about completely damaged houses only",'\n',
'Expected Landfall at : ',dt,' PST in (',time_for_landfall,' hrs)')
tmap_mode(mode = "plot")
impact_map=tm_shape(php_admin4) + tm_polygons(col = "probability_90k", name='adm3_en',
palette=c('#f1eef6','#d7b5d8','#df65b0','#dd1c77','#980043'),
breaks=c(0,40,50,60,90,100),colorNA=NULL,
labels=c('   < 40%','40 - 50%','50 - 60%','60 - 90%','   > 90%'),
title="Probability for #Dam. Buld >90k",
alpha = 0.75,
border.col = "black",lwd = 0.01,lyt='dotted')+
tm_borders(col = NA, lwd = .15, lty = "solid", alpha = .5, group = NA) +
tm_shape(my_track) + tm_symbols(size=0.1,border.alpha = .75,col='#0c2c84')+
tm_compass(type = "8star", position = c("right", "top")) +
tm_scale_bar(breaks = c(0, 100, 200), text.size = .5,
color.light = "#f0f0f0",
position = c(0,.1))+
tm_credits("The maps used do not imply the expression of any opinion on the part of the International Federation of the \nRed Cross and Red Crescent Societies concerning the legal status of a territory or of its authorities.",
position = c("left", "BOTTOM"),size = 0.6) +
tm_layout(legend.show = FALSE)
impact_map
source('lib_r/Make_maps.R')
maps <- Make_maps(php_admin1,event_impact,track,TYF='ECMWF',Typhoon_stormname)
source('lib_r/Make_maps.R')
maps <- Make_maps_avg(php_admin1,event_impact,track,TYF='ECMWF',Typhoon_stormname)
source('lib_r/Make_maps.R')
maps <- Make_maps_avg(php_admin1,event_impact,track,TYF='ECMWF',Typhoon_stormname)
source('lib_r/Make_maps.R')
maps <- Make_maps_avg(php_admin1,event_impact,track,TYF='ECMWF',Typhoon_stormname)
maps
php_admin3_=event_impact
my_track=track
TYF='ECMWF'
################################### Make maps #########
Landfall_check <- st_intersection(php_admin1, my_track)
Landfall_point<-Landfall_check[1,]
Landfall_check_1 <- st_intersection(php_admin1,my_track[1,])
if (nrow(Landfall_check_1) == 0){
dt<-lubridate::with_tz(lubridate::ymd_hms(format(Landfall_check$date[1], format="%Y-%m-%d %H:%M:%S"),tz="UTC"), tz="Asia/Manila")
dt1<-lubridate::with_tz(lubridate::ymd_hm(format(as.character(TRACK_DATA$YYYYMMDDHH[1]), format="%Y%m%d%H%M"),tz="UTC"), tz="Asia/Manila")
dt2<-lubridate::with_tz(lubridate::ymd_hm(format(Sys.time(), format="%Y%m%d%H%M"),tz="Europe/Berlin"), tz="Asia/Manila")
dt2=lubridate::with_tz(lubridate::force_tz(Sys.time()), tz="Asia/Manila")
time_for_landfall<- as.numeric(difftime(dt,dt1,units="hours"))
etimated_landfall_time<-dt
}else{
dt<-NA #lubridate::with_tz(lubridate::ymd_hms(format(Landfall_check$date[1], format="%Y-%m-%d %H:%M:%S"),tz="UTC"), tz="Asia/Manila")
dt1<-lubridate::with_tz(lubridate::ymd_hm(format(as.character(TRACK_DATA$YYYYMMDDHH[1]), format="%Y%m%d%H%M"),tz="UTC"), tz="Asia/Manila")
dt2<-lubridate::with_tz(lubridate::ymd_hm(format(Sys.time(), format="%Y%m%d%H%M"),tz="Europe/Berlin"), tz="Asia/Manila")
time_for_landfall<- NA #as.numeric(difftime(dt,dt1,units="hours"))
etimated_landfall_time<-NA
}
#######################################################################
# caculate time for landfll
php_admin4 <- php_admin3_ %>%  dplyr::mutate(dam_perc_comp_prediction_lm_quantile = ntile_na(impact,5))# %>% filter(WEA_dist_track < 300)
region2<-extent(php_admin4)
typhoon_region = st_bbox(c(xmin =as.vector(region2@xmin),
xmax = as.vector(region2@xmax),
ymin = as.vector(region2@ymin),
ymax =as.vector(region2@ymax)),
crs = st_crs(php_admin1)) %>% st_as_sfc()
model_run_time<-lubridate::with_tz(lubridate::force_tz(Sys.time()), tz="Asia/Manila")
subtitle =paste0("Predicted damage per Municipality for ", Typhoon_stormname,'\n',
"Impact map generated at:",model_run_time,'\n',
"Source of wind speed forecast ",TYF,'\n',
"Only Areas within 100km of forecasted track are included",'\n',
"Prediction is about completely damaged houses only",'\n',
'Expected Landfall at : ',dt,' PST in (',time_for_landfall,' hrs)')
tmap_mode(mode = "plot")
impact_map=tm_shape(php_admin4) +
tm_fill(col = "impact",showNA=FALSE, border.col = "black",lwd = 3,lyt='dotted',
breaks = c(0,0.1,1,2,5,9.5,10),
title='Predicted % of Damaged ',
labels=c(' No Damage',' < 1%',' 1 to 2%',' 2 to 5%',' 5 to 10%',' > 10%'),
palette = c('#ffffe5','#fdd0a2','#fdae6b','#fd8d3c','#e6550d','#a63603')) + #,style = "cat")+
tm_borders(col = NA, lwd = .25, lty = "solid", alpha = .25, group = NA) +
tm_shape(my_track) + tm_symbols(col='Data_Provider',size=0.1,border.alpha = .25) +
#tm_layout(legend.show = TRUE, legend.position=c("left", "top"))#, main.title=subtitle, main.title.size=.8,asp=.8)
#tm_shape(Landfall_point) + tm_symbols(size=0.25,border.alpha = .25,col="red") +
tm_compass(type = "8star", position = c("right", "top")) +
tm_scale_bar(breaks = c(0, 100, 200), text.size = .5,
color.light = "#f0f0f0",
position = c(0,.1))+
tm_credits("The maps used do not imply the expression of any opinion on the part of the International Federation of the \nRed Cross and Red Crescent Societies concerning the legal status of a territory or of its authorities.",
position = c("left", "BOTTOM"),size = 0.6) +
tm_layout(legend.show = FALSE)#legend.outside= TRUE,            legend.outside.position=c("left"),            inner.margins=c(.01,.04, .02, .01),            main.title=subtitle, main.title.size=.8,asp=.8)
impact_map2=tm_shape(php_admin4) +
tm_fill(col = "impact",showNA=FALSE, border.col = "black",lwd = 3,lyt='dotted',
breaks = c(0,0.1,1,2,5,9.5,10),
title='Predicted % of Damaged ',
labels=c(' No Damage',' < 1%',' 1 to 2%',' 2 to 5%',' 5 to 10%',' > 10%'),
palette = c('#ffffff','#fdd0a2','#fdae6b','#fd8d3c','#e6550d','#a63603')) +
tm_shape(my_track) + tm_symbols(col='Data_Provider',size=0.1,border.alpha = .25) +
tm_layout(legend.only = TRUE, legend.position=c("left", "top"))#, main.title=subtitle, main.title.size=.8,asp=.8)
impact_map2
impact_map
impact_map=tm_shape(php_admin4) +
tm_fill(col = "impact",showNA=FALSE, border.col = "black",lwd = 3,lyt='dotted',
breaks = c(0,0.1,1,2,5,9.5,10),
title='Predicted % of Damaged ',
labels=c(' No Damage',' < 1%',' 1 to 2%',' 2 to 5%',' 5 to 10%',' > 10%'),
palette = c('#ffffe5','#fdd0a2','#fdae6b','#fd8d3c','#e6550d','#a63603')) + #,style = "cat")+
tm_borders(col = NA, lwd = .25, lty = "solid", alpha = .25, group = NA) +
#tm_shape(my_track) + tm_symbols(col='Data_Provider',size=0.1,border.alpha = .25) +
#tm_layout(legend.show = TRUE, legend.position=c("left", "top"))#, main.title=subtitle, main.title.size=.8,asp=.8)
#tm_shape(Landfall_point) + tm_symbols(size=0.25,border.alpha = .25,col="red") +
tm_compass(type = "8star", position = c("right", "top")) +
tm_scale_bar(breaks = c(0, 100, 200), text.size = .5,
color.light = "#f0f0f0",
position = c(0,.1))+
tm_credits("The maps used do not imply the expression of any opinion on the part of the International Federation of the \nRed Cross and Red Crescent Societies concerning the legal status of a territory or of its authorities.",
position = c("left", "BOTTOM"),size = 0.6) +
tm_layout(legend.show = FALSE)#legend.outside= TRUE,            legend.outside.position=c("left"),            inner.margins=c(.01,.04, .02, .01),            main.title=subtitle, main.title.size=.8,asp=.8)
impact_map
my_track
impact_map=tm_shape(php_admin4) +
tm_fill(col = "impact",showNA=FALSE, border.col = "black",lwd = 3,lyt='dotted',
breaks = c(0,0.1,1,2,5,9.5,10),
title='Predicted % of Damaged ',
labels=c(' No Damage',' < 1%',' 1 to 2%',' 2 to 5%',' 5 to 10%',' > 10%'),
palette = c('#ffffe5','#fdd0a2','#fdae6b','#fd8d3c','#e6550d','#a63603')) + #,style = "cat")+
tm_borders(col = NA, lwd = .25, lty = "solid", alpha = .25, group = NA) +
tm_shape(my_track) + tm_symbols(col='blue',size=0.1,border.alpha = .25) +
#tm_layout(legend.show = TRUE, legend.position=c("left", "top"))#, main.title=subtitle, main.title.size=.8,asp=.8)
#tm_shape(Landfall_point) + tm_symbols(size=0.25,border.alpha = .25,col="red") +
tm_compass(type = "8star", position = c("right", "top")) +
tm_scale_bar(breaks = c(0, 100, 200), text.size = .5,
color.light = "#f0f0f0",
position = c(0,.1))+
tm_credits("The maps used do not imply the expression of any opinion on the part of the International Federation of the \nRed Cross and Red Crescent Societies concerning the legal status of a territory or of its authorities.",
position = c("left", "BOTTOM"),size = 0.6) +
tm_layout(legend.show = FALSE)#legend.outside= TRUE,            legend.outside.position=c("left"),            inner.margins=c(.01,.04, .02, .01),            main.title=subtitle, main.title.size=.8,asp=.8)
impact_map
tm_shape(my_track) + tm_symbols(col='blue',size=0.1,border.alpha = .25)
my_track
ecmwf_hrs_track <- read.csv("C:/Users/ATeklesadik/OneDrive - Rode Kruis/Documents/documents/Typhoon-Impact-based-forecasting-model/forecast/Input/2021061215/Input/ecmwf_hrs_track.csv")
View(ecmwf_hrs_track)
track <- track_interpolation(ecmwf_hrs_track)
View(track)
maps <- Make_maps_avg(php_admin1,event_impact,track,TYF='ECMWF',Typhoon_stormname)
maps
my_track=track
TYF='ECMWF'
tm_shape(php_admin4) +
tm_fill(col = "impact",showNA=FALSE, border.col = "black",lwd = 3,lyt='dotted',
breaks = c(0,0.1,1,2,5,9.5,10),
title='Predicted % of Damaged ',
labels=c(' No Damage',' < 1%',' 1 to 2%',' 2 to 5%',' 5 to 10%',' > 10%'),
palette = c('#ffffe5','#fdd0a2','#fdae6b','#fd8d3c','#e6550d','#a63603')) + #,style = "cat")+
tm_borders(col = NA, lwd = .25, lty = "solid", alpha = .25, group = NA) +
tm_shape(my_track) + tm_symbols(col='blue',size=0.1,border.alpha = .25) +
#tm_layout(legend.show = TRUE, legend.position=c("left", "top"))#, main.title=subtitle, main.title.size=.8,asp=.8)
#tm_shape(Landfall_point) + tm_symbols(size=0.25,border.alpha = .25,col="red") +
tm_compass(type = "8star", position = c("right", "top")) +
tm_scale_bar(breaks = c(0, 100, 200), text.size = .5,
color.light = "#f0f0f0",
position = c(0,.1))+
tm_credits("The maps used do not imply the expression of any opinion on the part of the International Federation of the \nRed Cross and Red Crescent Societies concerning the legal status of a territory or of its authorities.",
position = c("left", "BOTTOM"),size = 0.6) +
tm_layout(legend.show = FALSE)#legend.outside= TRUE,            legend.outside.position=c("left"),            inner.margins=c(.01,.04, .02, .01),            main.title=subtitle, main.title.size=.8,asp=.8)
track <- track_interpolation(ecmwf_hrs_track)%>%dplyr::mutate(Data_Provider='ECMWF_HRS')
maps <- Make_maps_avg(php_admin1,event_impact,track,TYF='ECMWF',Typhoon_stormname)
maps
