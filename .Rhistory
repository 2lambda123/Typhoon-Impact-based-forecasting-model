gather("keys","measure",-typhoon)  %>% dplyr::mutate(model_name="baseine")
View(baseline_prediction)
baseline_prediction<-baseline(newdata=df2,threshold=0.55)%>%
dplyr::mutate(typhoon=GEN_typhoon_name,
R2_score_=MLmetrics::R2_Score(damage_baseline,DAM_comp_houses_perc),
MAE_ =MLmetrics::MAE(damage_baseline,DAM_comp_houses_perc),
MedianAE_ =MLmetrics::MedianAE(damage_baseline,DAM_comp_houses_perc),
RMSE_ =MLmetrics::RMSE(damage_baseline,DAM_comp_houses_perc),
kendallR2_=measures::KendallTau(DAM_comp_houses_perc,damage_baseline),
#kendallR2=cor(x=DAM_comp_houses_perc,y=damage_baseline,method="kendall"),
EexpVAR_=measures::EXPVAR(DAM_comp_houses_perc,damage_baseline)) %>%
dplyr::select(typhoon,R2_score_,MAE_,MedianAE_,RMSE_,kendallR2_,EexpVAR_) %>%
dplyr::group_by(typhoon) %>% dplyr::summarise(R2_score=mean(R2_score_),
mae=mean(MAE_),
madae=mean(MedianAE_),
rmse=mean(RMSE_),
kendalltau=mean(kendallR2_),
expvar=mean(EexpVAR_)) %>%
gather("keys","measure",-typhoon)  %>% dplyr::mutate(model_name="baseine")
data_linearmodel_plot<-read.csv("C:/documents/philipiness/Typhoons/Journal_paper_ibf/figures/linear_models_data2.csv")
data_linearmodel_plot<-read.csv("C:/Users/ATeklesadik/Documents/Journal_paper_ibf/figures/linear_models_data2.csv")
data_linearmodel_plot2<-data_linearmodel_plot  %>% dplyr::filter(keys %in% c("mae","medae" ,"rmse" ) )
data_linearmodel_plot1<-data_linearmodel_plot  %>% dplyr::filter(keys %in% c("expvar","kendalltau","rsq" ) )
data_linearmodel_plotmae<-data_linearmodel_plot1 %>% dplyr::filter(measure < 2 ,measure>-1)
data_linearmodel_plotmae2<-data_linearmodel_plot2 %>% dplyr::filter(measure < 20 ,measure>-1)
boxplot.typhon_lm1<-
ggplot(data = data_linearmodel_plotmae, aes(x = model_name, y = measure)) + theme_light()+
geom_boxplot( aes(color = set),outlier.colour=NA) +
geom_jitter(color="grey", size=0.1, alpha=0.25)+
#facet_grid(typhoon ~ keys,scales = "free",labeller = labeller(keys = c("mae" = "MAE","mape" = "MAPE",                                                                           "mse" = "MSE","rmse"="RMSE") ))+
facet_wrap(~keys,nrow = 1,      scales = "free",labeller = labeller(keys = c("expvar"="Exp Variance","mae" = "Mean AE","medae" = "Median AE",  "rsq" = "R2","rmse"="RMSE","kendalltau"="Kendall R2") ))+
ggtitle("Comparsion of Model Accuracy for traing and validation sets") +
theme(plot.title = element_text(color="Black", size=12,hjust = 0.5),legend.position="bottom",
axis.title.x=element_blank(),
axis.title.y =element_blank(),
legend.title=element_blank(),
legend.box = "horizontal",text = element_text(size=10))
boxplot.typhon_lm2<- ggplot(data = data_linearmodel_plotmae2, aes(x = model_name, y = measure)) + theme_light()+
geom_boxplot( aes(color = set),outlier.colour=NA, outlier.shape=16, outlier.size=.1) +
geom_jitter(color="grey", size=0.1, alpha=0.25)+
#facet_grid(typhoon ~ keys,scales = "free",labeller = labeller(keys = c("mae" = "MAE","mape" = "MAPE",                                                                           "mse" = "MSE","rmse"="RMSE") ))+
facet_wrap(~keys,nrow = 1,      scales = "free",labeller = labeller(keys = c("expvar"="Exp Variance","mae" = "Mean AE","medae" = "Median AE",  "rsq" = "R2","rmse"="RMSE","kendalltau"="Kendall R2") ))+
ggtitle("Comparsion of Model Accuracy for traing and validation sets") +
theme(plot.title = element_text(color="Black", size=12,hjust = 0.5),legend.position="bottom",
axis.title.x=element_blank(),
axis.title.y =element_blank(),
legend.title=element_blank(),
legend.box = "horizontal",text = element_text(size=10))
# ggsave('C:/documents/philipiness/Typhoons/Journal_paper_ibf/figures/boxplot_summery.png',plot=boxplot.typhon, scale=1,width=20,height = 10, units="cm",dpi = 300)
ggsave('C:/documents/philipiness/Typhoons/Journal_paper_ibf/figures/boxplot.typhon_lm2.PNG',
plot=boxplot.typhon_lm2, scale=1,width=24,height = 12, units="cm",dpi = 400)
# ggsave('C:/documents/philipiness/Typhoons/Journal_paper_ibf/figures/boxplot_summery.png',plot=boxplot.typhon, scale=1,width=20,height = 10, units="cm",dpi = 300)
ggsave('C:/Users/ATeklesadik/Documents/Journal_paper_ibf/figures/boxplot.typhon_lm2.PNG',
plot=boxplot.typhon_lm2, scale=1,width=24,height = 12, units="cm",dpi = 400)
ggsave('C:/Users/ATeklesadik/Documents/Journal_paper_ibf/figures/boxplot.typhon_lm.PNG',
plot=boxplot.typhon_lm1, scale=1,width=24,height = 12, units="cm",dpi = 500)
data_linearmodel_plot2<-data_linearmodel_plot  %>% dplyr::filter(keys %in% c("mae","medae" ,"rmse" ) )
data_linearmodel_plot1<-data_linearmodel_plot  %>% dplyr::filter(keys %in% c("expvar","kendalltau","rsq" ) )
#data_linearmodel_plotmae<-data_linearmodel_plot1 %>% dplyr::filter(measure < 2 ,measure>-1)
#data_linearmodel_plotmae2<-data_linearmodel_plot2 %>% dplyr::filter(measure < 20 ,measure>-1)
boxplot.typhon_lm1<-
ggplot(data = data_linearmodel_plotmae, aes(x = model_name, y = measure)) + theme_light()+
geom_boxplot( aes(color = set),outlier.colour=NA) +
geom_jitter(color="grey", size=0.1, alpha=0.25)+
#facet_grid(typhoon ~ keys,scales = "free",labeller = labeller(keys = c("mae" = "MAE","mape" = "MAPE",                                                                           "mse" = "MSE","rmse"="RMSE") ))+
facet_wrap(~keys,nrow = 1,      scales = "free",labeller = labeller(keys = c("expvar"="Exp Variance","mae" = "Mean AE","medae" = "Median AE",  "rsq" = "R2","rmse"="RMSE","kendalltau"="Kendall R2") ))+
ggtitle("Comparsion of Model Accuracy for traing and validation sets") +
theme(plot.title = element_text(color="Black", size=12,hjust = 0.5),legend.position="bottom",
axis.title.x=element_blank(),
axis.title.y =element_blank(),
legend.title=element_blank(),
legend.box = "horizontal",text = element_text(size=10))
boxplot.typhon_lm2<- ggplot(data = data_linearmodel_plotmae2, aes(x = model_name, y = measure)) + theme_light()+
geom_boxplot( aes(color = set),outlier.colour=NA, outlier.shape=16, outlier.size=.1) +
geom_jitter(color="grey", size=0.1, alpha=0.25)+
#facet_grid(typhoon ~ keys,scales = "free",labeller = labeller(keys = c("mae" = "MAE","mape" = "MAPE",                                                                           "mse" = "MSE","rmse"="RMSE") ))+
facet_wrap(~keys,nrow = 1,      scales = "free",labeller = labeller(keys = c("expvar"="Exp Variance","mae" = "Mean AE","medae" = "Median AE",  "rsq" = "R2","rmse"="RMSE","kendalltau"="Kendall R2") ))+
ggtitle("Comparsion of Model Accuracy for traing and validation sets") +
theme(plot.title = element_text(color="Black", size=12,hjust = 0.5),legend.position="bottom",
axis.title.x=element_blank(),
axis.title.y =element_blank(),
legend.title=element_blank(),
legend.box = "horizontal",text = element_text(size=10))
# ggsave('C:/documents/philipiness/Typhoons/Journal_paper_ibf/figures/boxplot_summery.png',plot=boxplot.typhon, scale=1,width=20,height = 10, units="cm",dpi = 300)
ggsave('C:/Users/ATeklesadik/Documents/Journal_paper_ibf/figures/boxplot.typhon_lm2.PNG',
plot=boxplot.typhon_lm2, scale=1,width=24,height = 12, units="cm",dpi = 400)
ggsave('C:/Users/ATeklesadik/Documents/Journal_paper_ibf/figures/boxplot.typhon_lm.PNG',
plot=boxplot.typhon_lm1, scale=1,width=24,height = 12, units="cm",dpi = 500)
shiny::runApp('C:/Users/ATeklesadik/OneDrive - Rode Kruis/Documents/documents/Flood_impact_models/dashboard/catalog_view_kenya')
runApp('C:/Users/ATeklesadik/OneDrive - Rode Kruis/Documents/documents/Flood_impact_models/dashboard/catalog_view_kenya')
runApp('C:/Users/ATeklesadik/OneDrive - Rode Kruis/Documents/documents/Flood_impact_models/dashboard/catalog_view_kenya')
runApp('C:/Users/ATeklesadik/OneDrive - Rode Kruis/Documents/documents/Flood_impact_models/dashboard/catalog_view_kenya')
runApp('C:/Users/ATeklesadik/OneDrive - Rode Kruis/Documents/documents/Flood_impact_models/dashboard/catalog_view_kenya')
runApp('C:/Users/ATeklesadik/OneDrive - Rode Kruis/Documents/documents/Flood_impact_models/dashboard/catalog_view_kenya')
runApp('C:/Users/ATeklesadik/OneDrive - Rode Kruis/Documents/documents/Flood_impact_models/dashboard/catalog_view_kenya')
shiny::runApp('C:/Users/ATeklesadik/OneDrive - Rode Kruis/Documents/documents/Flood_impact_models/dashboard/catalog_view_Ethiopia')
shiny::runApp('C:/Users/ATeklesadik/OneDrive - Rode Kruis/Documents/documents/IBF-system/trigger-model-development/flood/trigger-model/dashboard/IARP_trigger_dashboard')
p2 <- plot_ly(glofas) %>%
add_lines(x=~date, y=as.formula(paste0('~', glofas_variable)), line=list(color="rgb(98, 211, 234)")) %>%
add_segments(x=~min(date), xend=~max(date), y = glofas_threshold, yend=glofas_threshold, line=list(color="black")) %>%
add_segments(x=~min(date), xend=~max(date), y = rp_glofas$q10, yend=rp_glofas$q10, name = 'q10', line=list(color="rgb(253, 130, 155)", width = 2,dash = "dot")) %>%
add_segments(x=~min(date), xend=~max(date), y = rp_glofas$q50, yend=rp_glofas$q50, name = 'q50', line=list(color="rgb(205, 12, 24)",width = 2, dash = "dash")) %>%
layout(yaxis=list(title=paste0("Station", glofas_variable)), showlegend=TRUE)
runApp('C:/Users/ATeklesadik/OneDrive - Rode Kruis/Documents/documents/IBF-system/trigger-model-development/flood/trigger-model/dashboard/IARP_trigger_dashboard')
runApp('C:/Users/ATeklesadik/OneDrive - Rode Kruis/Documents/documents/IBF-system/trigger-model-development/flood/trigger-model/dashboard/IARP_trigger_dashboard')
runApp('C:/Users/ATeklesadik/OneDrive - Rode Kruis/Documents/documents/IBF-system/trigger-model-development/flood/trigger-model/dashboard/IARP_trigger_dashboard')
runApp('C:/Users/ATeklesadik/OneDrive - Rode Kruis/Documents/documents/IBF-system/trigger-model-development/flood/trigger-model/dashboard/IARP_trigger_dashboard')
shiny::runApp('C:/Users/ATeklesadik/OneDrive - Rode Kruis/Documents/documents/IBF-system/trigger-model-development/flood/trigger-model/dashboard/IARP_trigger_dashboard')
shiny::runApp('C:/Users/ATeklesadik/OneDrive - Rode Kruis/Documents/documents/IBF-system/trigger-model-development/flood/trigger-model/dashboard/IARP_trigger_dashboard')
View(kenya_admin1)
View(kenya_impact)
View(kenya_impact)
#!/usr/bin/env Rscript
args = commandArgs(trailingOnly=TRUE)
#options(warn=-1)
suppressMessages(library(stringr))
suppressMessages(library(ggplot2))
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(gridExtra))
suppressMessages(library(tmap))
suppressMessages(library(viridis))
suppressMessages(library(maps))
suppressMessages(library(ggmap))
suppressMessages(library(httr))
suppressMessages(library(sf))
suppressMessages(library(raster))
suppressMessages(library(rgdal))
suppressMessages(library(ranger))
suppressMessages(library(caret))
suppressMessages(library(randomForest))
suppressMessages(library(rlang))
suppressMessages(library(AUCRF))
suppressMessages(library(kernlab))
suppressMessages(library(ROCR))
suppressMessages(library(MASS))
suppressMessages(library(glmnet))
suppressMessages(library(MLmetrics))
suppressMessages(library(plyr))
suppressMessages(library(lubridate))
suppressMessages(library(rNOMADS))
suppressMessages(library(ncdf4))
rainfall_error = args[1]
path='C:/Users/ATeklesadik/OneDrive - Rode Kruis/Documents/documents/Typhoon-Impact-based-forecasting-model/'
main_directory<-path
###########################################################################
# ------------------------ import DATA  -----------------------------------
setwd(path)
source('lib_r/settings.R')
source('lib_r/data_cleaning_forecast.R')
source('lib_r/prepare_typhoon_input.R')
source('lib_r/prepare_typhoon_input.R')
source('lib_r/track_interpolation.R')
source('lib_r/Read_rainfall_v2.R')
source('lib_r/Model_input_processing.R')
source('lib_r/run_prediction_model.R')
source('lib_r/Check_landfall_time.R')
source('lib_r/Make_maps.R')
ntile_na <- function(x,n){
notna <- !is.na(x)
out <- rep(NA_real_,length(x))
out[notna] <- ntile(x[notna],n)
return(out)
}
dir.create(file.path(paste0(main_directory,'typhoon_infographic/shapes/', Typhoon_stormname)), showWarnings = FALSE)
typhoon_events<-c(UCL_directory,ECMWF_directory)#,HK_directory,JTCW_directory)
ftrack_geodb=paste0(main_directory,'typhoon_infographic/shapes/',Typhoon_stormname, '/',Typhoon_stormname,'1_',forecast_time,'_track.gpkg')
path='C:/Users/ATeklesadik/OneDrive - Rode Kruis/Documents/documents/Typhoon-Impact-based-forecasting-model/'
main_directory<-path
###########################################################################
# ------------------------ import DATA  -----------------------------------
setwd(path)
source('lib_r/settings.R')
source('lib_r/data_cleaning_forecast.R')
source('lib_r/prepare_typhoon_input.R')
source('lib_r/prepare_typhoon_input.R')
source('lib_r/track_interpolation.R')
source('lib_r/Read_rainfall_v2.R')
source('lib_r/Model_input_processing.R')
source('lib_r/run_prediction_model.R')
rainfall_error = args[1]
path='C:/Users/ATeklesadik/OneDrive - Rode Kruis/Documents/documents/Typhoon-Impact-based-forecasting-model/'
main_directory<-path
###########################################################################
# ------------------------ import DATA  -----------------------------------
setwd(path)
source('lib_r/settings.R')
#options(warn=-1)
suppressMessages(library(stringr))
suppressMessages(library(ggplot2))
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(gridExtra))
suppressMessages(library(tmap))
suppressMessages(library(viridis))
suppressMessages(library(maps))
suppressMessages(library(ggmap))
suppressMessages(library(httr))
suppressMessages(library(sf))
suppressMessages(library(raster))
suppressMessages(library(rgdal))
suppressMessages(library(ranger))
suppressMessages(library(caret))
suppressMessages(library(randomForest))
suppressMessages(library(rlang))
suppressMessages(library(AUCRF))
suppressMessages(library(kernlab))
suppressMessages(library(ROCR))
suppressMessages(library(MASS))
suppressMessages(library(glmnet))
suppressMessages(library(MLmetrics))
suppressMessages(library(plyr))
suppressMessages(library(lubridate))
suppressMessages(library(rNOMADS))
suppressMessages(library(ncdf4))
rainfall_error = args[1]
path='C:/Users/ATeklesadik/OneDrive - Rode Kruis/Documents/documents/Typhoon-Impact-based-forecasting-model/'
main_directory<-path
###########################################################################
# ------------------------ import DATA  -----------------------------------
setwd(path)
source('lib_r/settings.R')
source('lib_r/data_cleaning_forecast.R')
source('lib_r/prepare_typhoon_input.R')
source('lib_r/prepare_typhoon_input.R')
source('lib_r/track_interpolation.R')
source('lib_r/Read_rainfall_v2.R')
source('lib_r/Model_input_processing.R')
source('lib_r/run_prediction_model.R')
source('lib_r/Check_landfall_time.R')
source('lib_r/Make_maps.R')
# load the rr model
mode_classification <- readRDS(paste0(main_directory,"models/final_model.rds"))
mode_continious <- readRDS(paste0(main_directory,"models/final_model_regression.rds"))
wshade <- php_admin3
# load forecast data
typhoon_info_for_model <- read.csv(paste0(main_directory,"/forecast/Input/typhoon_info_for_model.csv"))
rain_directory<-as.character(typhoon_info_for_model[typhoon_info_for_model$source=='Rainfall',]$filename)
UCL_<-as.character(typhoon_info_for_model[typhoon_info_for_model$source=='UCL',]$filename)
# load forecast data
typhoon_info_for_model <- read.csv(paste0(main_directory,"/forecast/Input/typhoon_info_for_model.csv"))
path='C:/Users/ATeklesadik/OneDrive - Rode Kruis/Documents/documents/Typhoon-Impact-based-forecasting-model/'
main_directory<-path
###########################################################################
# ------------------------ import DATA  -----------------------------------
setwd(path)
source('lib_r/settings.R')
source('lib_r/data_cleaning_forecast.R')
source('lib_r/prepare_typhoon_input.R')
source('lib_r/prepare_typhoon_input.R')
source('lib_r/track_interpolation.R')
source('lib_r/Read_rainfall_v2.R')
source('lib_r/Model_input_processing.R')
source('lib_r/run_prediction_model.R')
source('lib_r/Check_landfall_time.R')
source('lib_r/Make_maps.R')
# load the rr model
mode_classification <- readRDS(paste0(main_directory,"models/final_model.rds"))
mode_continious <- readRDS(paste0(main_directory,"models/final_model_regression.rds"))
wshade <- php_admin3
typhoon_info_for_model <- read.csv(paste0(main_directory,"/forecast/Input/typhoon_info_for_model.csv"))
rain_directory<-as.character(typhoon_info_for_model[typhoon_info_for_model$source=='Rainfall',]$filename)
UCL_<-as.character(typhoon_info_for_model[typhoon_info_for_model$source=='UCL',]$filename)
ECMWF_<-as.character(typhoon_info_for_model[typhoon_info_for_model$source=='ECMWF',]$filename)
Typhoon_stormname<-as.character(typhoon_info_for_model[typhoon_info_for_model$source=='UCL',]$event)
forecast_time<-as.character(typhoon_info_for_model[typhoon_info_for_model$source=='UCL',]$time)
forecast_time<-str_remove_all(forecast_time, "'")
rain_directory<-ifelse(identical(character(0), rain_directory),NULL,rain_directory)
UCL_directory<-ifelse(identical(character(0), UCL_),NA,UCL_)
ECMWF_directory<-ifelse(identical(character(0), ECMWF_),NA,ECMWF_)
ntile_na <- function(x,n){
notna <- !is.na(x)
out <- rep(NA_real_,length(x))
out[notna] <- ntile(x[notna],n)
return(out)
}
dir.create(file.path(paste0(main_directory,'typhoon_infographic/shapes/', Typhoon_stormname)), showWarnings = FALSE)
typhoon_events<-c(UCL_directory,ECMWF_directory)#,HK_directory,JTCW_directory)
ftrack_geodb=paste0(main_directory,'typhoon_infographic/shapes/',Typhoon_stormname, '/',Typhoon_stormname,'1_',forecast_time,'_track.gpkg')
if (file.exists(ftrack_geodb)){
file.remove(ftrack_geodb)
}
####################################################################################################
for(forecaster in (typhoon_events)){
#TRACK_DATA<-ECMWF_ECEP %>% filter(ENSAMBLE==1) #ECMWF_ECEP %>% filter(ENSAMBLE==ensambles)
TRACK_DATA<-read.csv(forecaster)
TYF<- str_split(str_split(forecaster,"/")[[1]][length(str_split(forecaster,"/")[[1]])],"_")[[1]][1]
if (TYF=="ECMWF2")
{
TRACK_DATA<-TRACK_DATA %>% dplyr::filter( model_name == 'ECMF')
}
my_track <- track_interpolation(TRACK_DATA) %>% dplyr::mutate(Data_Provider=TYF)
st_write(obj = my_track, dsn = paste0(main_directory,'typhoon_infographic/shapes/',Typhoon_stormname, '/',Typhoon_stormname,'1_',forecast_time,'_track.gpkg'),
layer ='tc_tracks', append = TRUE)
}
if (file.exists(ftrack_geodb)){
tc_tracks<-st_read(ftrack_geodb)
}
if (!is.null(typhoon_events)) {
for(forecaster in (typhoon_events))
{
if (file.exists(forecaster)){
TRACK_DATA<-read.csv(forecaster)
#TYF<- paste0('ECMWF_',ensambles)
TYF<- str_split(str_split(forecaster,"/")[[1]][length(str_split(forecaster,"/")[[1]])],"_")[[1]][1]
if (TYF=='ECMWF2')
{
TRACK_DATA<-TRACK_DATA%>% filter(model_name != 'ECMF')
}
my_track <- track_interpolation(TRACK_DATA) %>% dplyr::mutate(Data_Provider=TYF)
####################################################################################################
# check if there is a landfall
print("chincking landfall")
Landfall_check <- st_intersection(php_admin1, my_track)
cn_rows<-1#nrow(Landfall_check)
if (cn_rows > 0){
print("claculating data")
new_data<-Model_input_processing(TRACK_DATA,my_track,TYF,Typhoon_stormname)
####################################################################################################
print("running modesl")
FORECASTED_IMPACT<-run_prediction_model(data=new_data)
php_admin30<-php_admin3 %>% mutate(GEN_mun_code=adm3_pcode) %>%  left_join(FORECASTED_IMPACT,by="GEN_mun_code")
php_admin3_<-php_admin30 %>% dplyr::arrange(WEA_dist_track) %>%
dplyr::mutate(impact=ifelse(WEA_dist_track> 100,NA,impact),
impact_threshold_passed =ifelse(WEA_dist_track > 100,NA,impact_threshold_passed))
Impact<-php_admin3_  %>%   dplyr::select(GEN_mun_code,impact,impact_threshold_passed,WEA_dist_track) %>% st_set_geometry(NULL)
php_admin4 <- php_admin3_ %>%  dplyr::mutate(dam_perc_comp_prediction_lm_quantile = ntile_na(impact,5)) %>% filter(WEA_dist_track < 300)
region2<-extent(php_admin4)
typhoon_region = st_bbox(c(xmin =as.vector(region2@xmin), xmax = as.vector(region2@xmax),
ymin = as.vector(region2@ymin), ymax =as.vector(region2@ymax)),
crs = st_crs(php_admin1)) %>% st_as_sfc()
st_write(obj = php_admin4,
dsn = paste0(main_directory,'typhoon_infographic/shapes/',Typhoon_stormname, '/',Typhoon_stormname,'_',forecast_time,'_impact.gpkg'),
layer =TYF,
update = TRUE)
####################################################################################################
print("make mapsl")
#call map function
map1<-Make_maps(php_admin1,php_admin3_,my_track,tc_tracks,TYF,Typhoon_stormname)
tmap_save(map1,
filename = paste0(main_directory,'forecast/Output/',Typhoon_stormname,'/Impact_',TYF,'_',forecast_time,'_',  Typhoon_stormname,'.png'),
width=20, height=24,dpi=600,
units="cm")
####################################################################################################
# ------------------------ save to file   -----------------------------------
## save an image ("plot" mode) paste0(main_directory,'fbf/forecast/Impact_',  as.character(typhoon_events$event[i]),'.png')),
write.csv(Impact, file = paste0(main_directory,'forecast/Output/',Typhoon_stormname,'/Impact_', TYF,'_',forecast_time,'_' ,Typhoon_stormname,'.csv'))
#paste0('home/fbf/forecast/Impact_',as.vector(TRACK_DATA[1,]$YYYYMMDDHH),'_',as.vector(TRACK_DATA[1,]$STORMNAME),'.csv'))
file_names<- c(paste0(main_directory,'forecast/Output/',Typhoon_stormname,'/Impact_',TYF,'_',forecast_time,'_',  Typhoon_stormname,'.png'),
paste0(main_directory,'forecast/Output/',Typhoon_stormname,'/Impact_',TYF,'_',forecast_time,'_', Typhoon_stormname,'.csv'))
# paste0('home/fbf/forecast/Impact_',as.vector(TRACK_DATA[1,]$YYYYMMDDHH),'_',as.vector(TRACK_DATA[1,]$STORMNAME),'.png'),
# paste0('home/fbf/forecast/Impact_',as.vector(TRACK_DATA[1,]$YYYYMMDDHH),'_',as.vector(TRACK_DATA[1,]$STORMNAME),'.csv'))
write.table(file_names, file =paste0(main_directory, 'forecast/',Typhoon_stormname,'_',forecast_time,'_file_names.csv'),append=TRUE, col.names = FALSE)
}
else{
file_names<- c(paste0('Nolandfall','_',Typhoon_stormname,'.png'), paste0('Nolandfall','_',Typhoon_stormname,'.csv'))
write.table(file_names, file =paste0(main_directory, 'forecast/Output/',Typhoon_stormname,'_',forecast_time,'_file_names.csv'),append=TRUE, col.names = FALSE)
}
}
} ############################ if forecaster loop end here
}  ################## close the typhone loop
#!/usr/bin/env Rscript
args = commandArgs(trailingOnly=TRUE)
#options(warn=-1)
suppressMessages(library(stringr))
suppressMessages(library(ggplot2))
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(gridExtra))
suppressMessages(library(tmap))
suppressMessages(library(viridis))
suppressMessages(library(maps))
suppressMessages(library(ggmap))
suppressMessages(library(httr))
suppressMessages(library(sf))
suppressMessages(library(raster))
suppressMessages(library(rgdal))
suppressMessages(library(ranger))
suppressMessages(library(caret))
suppressMessages(library(randomForest))
suppressMessages(library(rlang))
suppressMessages(library(AUCRF))
suppressMessages(library(kernlab))
suppressMessages(library(ROCR))
suppressMessages(library(MASS))
suppressMessages(library(glmnet))
suppressMessages(library(MLmetrics))
suppressMessages(library(plyr))
suppressMessages(library(lubridate))
suppressMessages(library(rNOMADS))
suppressMessages(library(ncdf4))
rainfall_error = args[1]
path='C:/Users/ATeklesadik/OneDrive - Rode Kruis/Documents/documents/Typhoon-Impact-based-forecasting-model/'
main_directory<-path
###########################################################################
# ------------------------ import DATA  -----------------------------------
setwd(path)
source('lib_r/settings.R')
source('lib_r/data_cleaning_forecast.R')
source('lib_r/prepare_typhoon_input.R')
source('lib_r/prepare_typhoon_input.R')
source('lib_r/track_interpolation.R')
source('lib_r/Read_rainfall_v2.R')
source('lib_r/Model_input_processing.R')
source('lib_r/run_prediction_model.R')
source('lib_r/Check_landfall_time.R')
source('lib_r/Make_maps.R')
# load the rr model
mode_classification <- readRDS(paste0(main_directory,"models/final_model.rds"))
mode_continious <- readRDS(paste0(main_directory,"models/final_model_regression.rds"))
wshade <- php_admin3
typhoon_info_for_model <- read.csv(paste0(main_directory,"/forecast/Input/typhoon_info_for_model.csv"))
rain_directory<-as.character(typhoon_info_for_model[typhoon_info_for_model$source=='Rainfall',]$filename)
UCL_<-as.character(typhoon_info_for_model[typhoon_info_for_model$source=='UCL',]$filename)
ECMWF_<-as.character(typhoon_info_for_model[typhoon_info_for_model$source=='ECMWF',]$filename)
Typhoon_stormname<-as.character(typhoon_info_for_model[typhoon_info_for_model$source=='UCL',]$event)
forecast_time<-as.character(typhoon_info_for_model[typhoon_info_for_model$source=='UCL',]$time)
forecast_time<-str_remove_all(forecast_time, "'")
rain_directory<-ifelse(identical(character(0), rain_directory),NULL,rain_directory)
UCL_directory<-ifelse(identical(character(0), UCL_),NA,UCL_)
ECMWF_directory<-ifelse(identical(character(0), ECMWF_),NA,ECMWF_)
ntile_na <- function(x,n){
notna <- !is.na(x)
out <- rep(NA_real_,length(x))
out[notna] <- ntile(x[notna],n)
return(out)
}
dir.create(file.path(paste0(main_directory,'typhoon_infographic/shapes/', Typhoon_stormname)), showWarnings = FALSE)
typhoon_events<-c(UCL_directory,ECMWF_directory)#,HK_directory,JTCW_directory)
ftrack_geodb=paste0(main_directory,'typhoon_infographic/shapes/',Typhoon_stormname, '/',Typhoon_stormname,'1_',forecast_time,'_track.gpkg')
if (file.exists(ftrack_geodb)){
file.remove(ftrack_geodb)
}
####################################################################################################
for(forecaster in (typhoon_events)){
#TRACK_DATA<-ECMWF_ECEP %>% filter(ENSAMBLE==1) #ECMWF_ECEP %>% filter(ENSAMBLE==ensambles)
TRACK_DATA<-read.csv(forecaster)
TYF<- str_split(str_split(forecaster,"/")[[1]][length(str_split(forecaster,"/")[[1]])],"_")[[1]][1]
if (TYF=="ECMWF2")
{
TRACK_DATA<-TRACK_DATA %>% dplyr::filter( model_name == 'ECMF')
}
my_track <- track_interpolation(TRACK_DATA) %>% dplyr::mutate(Data_Provider=TYF)
st_write(obj = my_track, dsn = paste0(main_directory,'typhoon_infographic/shapes/',Typhoon_stormname, '/',Typhoon_stormname,'1_',forecast_time,'_track.gpkg'),
layer ='tc_tracks', append = TRUE)
}
if (file.exists(ftrack_geodb)){
tc_tracks<-st_read(ftrack_geodb)
}
if (!is.null(typhoon_events)) {
for(forecaster in (typhoon_events))
{
if (file.exists(forecaster)){
TRACK_DATA<-read.csv(forecaster)
#TYF<- paste0('ECMWF_',ensambles)
TYF<- str_split(str_split(forecaster,"/")[[1]][length(str_split(forecaster,"/")[[1]])],"_")[[1]][1]
if (TYF=='ECMWF2')
{
TRACK_DATA<-TRACK_DATA%>% filter(model_name != 'ECMF')
}
my_track <- track_interpolation(TRACK_DATA) %>% dplyr::mutate(Data_Provider=TYF)
####################################################################################################
# check if there is a landfall
print("chincking landfall")
Landfall_check <- st_intersection(php_admin1, my_track)
cn_rows<-1#nrow(Landfall_check)
if (cn_rows > 0){
print("claculating data")
new_data<-Model_input_processing(TRACK_DATA,my_track,TYF,Typhoon_stormname)
####################################################################################################
print("running modesl")
FORECASTED_IMPACT<-run_prediction_model(data=new_data)
php_admin30<-php_admin3 %>% mutate(GEN_mun_code=adm3_pcode) %>%  left_join(FORECASTED_IMPACT,by="GEN_mun_code")
php_admin3_<-php_admin30 %>% dplyr::arrange(WEA_dist_track) %>%
dplyr::mutate(impact=ifelse(WEA_dist_track> 100,NA,impact),
impact_threshold_passed =ifelse(WEA_dist_track > 100,NA,impact_threshold_passed))
Impact<-php_admin3_  %>%   dplyr::select(GEN_mun_code,impact,impact_threshold_passed,WEA_dist_track) %>% st_set_geometry(NULL)
php_admin4 <- php_admin3_ %>%  dplyr::mutate(dam_perc_comp_prediction_lm_quantile = ntile_na(impact,5)) %>% filter(WEA_dist_track < 300)
region2<-extent(php_admin4)
typhoon_region = st_bbox(c(xmin =as.vector(region2@xmin), xmax = as.vector(region2@xmax),
ymin = as.vector(region2@ymin), ymax =as.vector(region2@ymax)),
crs = st_crs(php_admin1)) %>% st_as_sfc()
st_write(obj = php_admin4,
dsn = paste0(main_directory,'typhoon_infographic/shapes/',Typhoon_stormname, '/',Typhoon_stormname,'_',forecast_time,'_impact.gpkg'),
layer =TYF,
update = TRUE)
####################################################################################################
print("make mapsl")
#call map function
map1<-Make_maps(php_admin1,php_admin3_,my_track,tc_tracks,TYF,Typhoon_stormname)
tmap_save(map1,
filename = paste0(main_directory,'forecast/Output/',Typhoon_stormname,'/Impact_',TYF,'_',forecast_time,'_',  Typhoon_stormname,'.png'),
width=20, height=24,dpi=600,
units="cm")
####################################################################################################
# ------------------------ save to file   -----------------------------------
## save an image ("plot" mode) paste0(main_directory,'fbf/forecast/Impact_',  as.character(typhoon_events$event[i]),'.png')),
write.csv(Impact, file = paste0(main_directory,'forecast/Output/',Typhoon_stormname,'/Impact_', TYF,'_',forecast_time,'_' ,Typhoon_stormname,'.csv'))
#paste0('home/fbf/forecast/Impact_',as.vector(TRACK_DATA[1,]$YYYYMMDDHH),'_',as.vector(TRACK_DATA[1,]$STORMNAME),'.csv'))
file_names<- c(paste0(main_directory,'forecast/Output/',Typhoon_stormname,'/Impact_',TYF,'_',forecast_time,'_',  Typhoon_stormname,'.png'),
paste0(main_directory,'forecast/Output/',Typhoon_stormname,'/Impact_',TYF,'_',forecast_time,'_', Typhoon_stormname,'.csv'))
# paste0('home/fbf/forecast/Impact_',as.vector(TRACK_DATA[1,]$YYYYMMDDHH),'_',as.vector(TRACK_DATA[1,]$STORMNAME),'.png'),
# paste0('home/fbf/forecast/Impact_',as.vector(TRACK_DATA[1,]$YYYYMMDDHH),'_',as.vector(TRACK_DATA[1,]$STORMNAME),'.csv'))
write.table(file_names, file =paste0(main_directory, 'forecast/',Typhoon_stormname,'_',forecast_time,'_file_names.csv'),append=TRUE, col.names = FALSE)
}
else{
file_names<- c(paste0('Nolandfall','_',Typhoon_stormname,'.png'), paste0('Nolandfall','_',Typhoon_stormname,'.csv'))
write.table(file_names, file =paste0(main_directory, 'forecast/Output/',Typhoon_stormname,'_',forecast_time,'_file_names.csv'),append=TRUE, col.names = FALSE)
}
}
} ############################ if forecaster loop end here
}  ################## close the typhone loop
